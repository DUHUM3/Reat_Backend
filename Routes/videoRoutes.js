const express = require('express');
const mongoose = require('mongoose');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const { Category, Video, Series } = require('../Models/Video');

const router = express.Router();

// ๐ข ุฅุนุฏุงุฏ multer ูุชุฎุฒูู ุงููููุงุช ุฏุงุฎู ูุฌูุฏ ุงูุณูุณูุฉ
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const seriesName = req.body.seriesName || 'default_series';
        const uploadPath = `uploads/videos/${seriesName}/`;

        if (!fs.existsSync(uploadPath)) {
            fs.mkdirSync(uploadPath, { recursive: true });
        }

        cb(null, uploadPath);
    },
    filename: (req, file, cb) => {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});

const upload = multer({ storage });
const categoryStorage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadPath = 'uploads/categories/';
        if (!fs.existsSync(uploadPath)) {
            fs.mkdirSync(uploadPath, { recursive: true });
        }
        cb(null, uploadPath);
    },
    filename: (req, file, cb) => {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});

const uploadCategoryImage = multer({ storage: categoryStorage });

// ๐ข ุฅุถุงูุฉ ูุณู ุฌุฏูุฏ
router.post('/categories', uploadCategoryImage.single('image'), async (req, res) => {
    try {
        const { name, description } = req.body;

        // ๐ด ุงูุชุญูู ูู ุฃู ุงููุณู ุบูุฑ ููุฌูุฏ ูุณุจููุง
        const existingCategory = await Category.findOne({ name });
        if (existingCategory) {
            return res.status(400).json({ error: 'ุงุณู ุงููุณู ููุฌูุฏ ุจุงููุนูุ ูุง ูููู ุชูุฑุงุฑู' });
        }

        // ๐ข ุญูุธ ูุณุงุฑ ุงูุตูุฑุฉ ุฅุฐุง ุชู ุฑูุนูุง
        const imagePath = req.file ? req.file.path : null;

        const category = new Category({ name, description, image: imagePath });
        await category.save();
        
        res.status(201).json({ message: 'ุชู ุฅูุดุงุก ุงููุณู ุจูุฌุงุญ', category });

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});



// ๐ข ุฅุถุงูุฉ ูุณูุณู ุฌุฏูุฏ
router.post('/series', async (req, res) => {
    try {
        const { title, description, category } = req.body;

        // ๐ด ุงูุชุญูู ูู ุฃู ุงููุณูุณู ุบูุฑ ููุฌูุฏ ูุณุจููุง
        const existingSeries = await Series.findOne({ title });
        if (existingSeries) {
            return res.status(400).json({ error: 'ุงุณู ุงููุณูุณู ููุฌูุฏ ุจุงููุนูุ ูุง ูููู ุชูุฑุงุฑู' });
        }

        const series = new Series({ title, description, category });
        await series.save();
        res.status(201).json({ message: 'ุชู ุฅูุดุงุก ุงููุณูุณู ุจูุฌุงุญ', series });

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ๐ข ุฅุถุงูุฉ ููุฏูู ูุน ุฑูุน ููู
router.post('/videos', upload.single('videos'), async (req, res) => {
    try {
        const { title, category, series, url } = req.body;

        // ุงูุชุญูู ูู ุฃู ุงูููุฏูู ูุฑุชุจุท ุฅูุง ุจูุณู ุฃู ูุณูุณู
        if (!category && !series) {
            return res.status(400).json({ error: 'ูุฌุจ ุฃู ูููู ุงูููุฏูู ูุฑุชุจุทูุง ุฅูุง ุจูุณู ุฃู ูุณูุณู' });
        }

        // ุงูุชุญูู ูู ุฑูุน ุงูููู
        if (!req.file) {
            return res.status(400).json({ error: 'ูุฌุจ ุฑูุน ููู ููุฏูู' });
        }

        const filename = req.file.filename;
        const videoPath = req.file.path;

        const video = new Video({ title, filename, category, series, url: videoPath });
        await video.save();

        res.status(201).json({ message: 'ุชู ุฅูุดุงุก ุงูููุฏูู ูุฑูุนู ุจูุฌุงุญ', video });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

router.get('/all-data', async (req, res) => {
    try {
        const categories = await Category.find();
        const seriesList = await Series.find().populate('category', 'name'); // ุฌูุจ ุงุณู ุงููุณู ุงููุฑุชุจุท ุจุงููุณูุณู

        res.status(200).json({
            categories,
            series: seriesList
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ๐ข ุนุฑุถ ุขุฎุฑ 10 ููุฏูููุงุช ูู ูุณู "films" ูุขุฎุฑ 10 ููุฏูููุงุช ุชู ุฅุถุงูุชูุง ูููุณูุณูุงุช ูู ุฑูุช ูุงุญุฏ
router.get('/latest-videos', async (req, res) => {
    try {
        // ุฌูุจ ุงููุณู ุงูุฐู ุงุณูู "films"
        const category = await Category.findOne({ name: 'films' });
        if (!category) {
            return res.status(404).json({ error: 'ุงููุณู "films" ุบูุฑ ููุฌูุฏ' });
        }

        // ุฌูุจ ุขุฎุฑ 10 ููุฏูููุงุช ูู ูุณู "films"
        const filmsVideos = await Video.find({ category: category._id })
            .sort({ createdAt: -1 }) // ุชุฑุชูุจ ุงูููุฏูููุงุช ุญุณุจ ุชุงุฑูุฎ ุงูุฅุถุงูุฉ (ุงูุฃุญุฏุซ ุฃููุงู)
            .limit(10);

        // ุฌูุจ ุขุฎุฑ 10 ููุฏูููุงุช ุชู ุฅุถุงูุชูุง ูููุณูุณูุงุช
        const seriesVideos = await Video.find({ series: { $ne: null } }) // ุงูููุฏูููุงุช ุงูุชู ููุง ูุณูุณู
            .sort({ createdAt: -1 }) // ุชุฑุชูุจ ุงูููุฏูููุงุช ุญุณุจ ุชุงุฑูุฎ ุงูุฅุถุงูุฉ (ุงูุฃุญุฏุซ ุฃููุงู)
            .limit(10);

        // ุฅุฑุณุงู ุงูุจูุงูุงุช
        res.status(200).json({
            filmsVideos,
            seriesVideos
        });

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ๐ข ุนุฑุถ ูู ููุฏูููุงุช ูุณู ูุนูู ุฃู ูุณูุณู ูุนูู
router.get('/videos-by-category-or-series', async (req, res) => {
    try {
        const { categoryId, seriesId } = req.query;

        // ุงูุชุญูู ูู ูุฌูุฏ ูุงุญุฏ ูู ุงููุนุงููุงุช
        if (!categoryId && !seriesId) {
            return res.status(400).json({ error: 'ูุฌุจ ุชุญุฏูุฏ id ูุณู ุฃู ูุณูุณู' });
        }

        let query = {};

        // ุฅุฐุง ุชู ุชูุฏูู categoryIdุ ูุฅููุง ูุจุญุซ ุนู ุงูููุฏูููุงุช ุงููุฑุชุจุทุฉ ุจูุฐุง ุงููุณู
        if (categoryId) {
            query.category = categoryId;
        }

        // ุฅุฐุง ุชู ุชูุฏูู seriesIdุ ูุฅููุง ูุจุญุซ ุนู ุงูููุฏูููุงุช ุงููุฑุชุจุทุฉ ุจูุฐุง ุงููุณูุณู
        if (seriesId) {
            query.series = seriesId;
        }

        // ุฌูุจ ุงูููุฏูููุงุช ููููุง ููู query ุงูููุฏู
        const videos = await Video.find(query).sort({ createdAt: -1 }); // ุชุฑุชูุจ ุงูููุฏูููุงุช ุญุณุจ ุชุงุฑูุฎ ุงูุฅุถุงูุฉ (ุงูุฃุญุฏุซ ุฃููุงู)

        if (videos.length === 0) {
            return res.status(404).json({ message: 'ูุง ุชูุฌุฏ ููุฏูููุงุช ููุฐุง ุงููุณู ุฃู ุงููุณูุณู' });
        }

        res.status(200).json({ videos });

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});



module.exports = router;
